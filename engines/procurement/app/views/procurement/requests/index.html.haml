= render partial: 'header'

= form_tag nil, remote: true, multipart: true do
  %table.table.table-striped
    %thead
      %tr
        -#%th{width: '10%'}= _('Group')
        %th{width: '25%'}= _('Description')
        %th{width: '10%'}= _('Desired quantity')
        %th{width: '10%'}= _('Approved quantity')
        %th{width: '10%'}= "%s %s" % [_('Price'), MoneyRails.default_currency]
        %th{width: '10%'}= "%s %s" % [_('Total'), MoneyRails.default_currency]
        %th{width: '15%'}= _('Supplier')
        %th{width: '10%'}= _('Attachment')
        %th{width: '10%'}= _('Status')
    %tbody
      - i = 0
      - @requests.each do |request|
        - if request.editable?(current_user)
          = render partial: 'write', locals: {request: request}
        - else
          = render partial: 'read', locals: {request: request}

      - if params[:budget_period] != 'past' and (Procurement::BudgetPeriod.current.in_requesting_phase? or @group.inspectors.include?(current_user))
        - already_requested_descriptions = @requests.map &:description
        - Procurement::RequestTemplate.where(group_id: @group).where.not(description: already_requested_descriptions).each do |request_template|
          %tr
            - i += 1
            -#%td
              %select.form-control{name: "requests[new_#{i}][group_id]"}
                %option{value: request_template.group_id, selected: true}= request_template.group
            %td
              %input{type: 'hidden', name: "requests[new_#{i}][description]", value: request_template.description}
              = request_template.description
              -#%select.form-control{name: "requests[new_#{i}][description]"}
                %option{value: request_template.description, selected: true}= request_template.description
            %td
              %input.form-control{name: "requests[new_#{i}][desired_quantity]", type: :number, min: 0, placeholder: _('Desired quantity'), autocomplete: :off}
            %td
              - if request_template.group.inspectors.include? current_user
                %input.form-control{name: "requests[new_#{i}][approved_quantity]", type: :number, min: 0, placeholder: _('Approved quantity'), autocomplete: :off}
            %td
              %input.form-control{name: "requests[new_#{i}][price]", type: :number, min: 0, value: request_template.price.to_i, placeholder: _('Price'), autocomplete: :off}
            %td
            %td
              %select.form-control{name: "requests[new_#{i}][supplier]"}
                %option{value: request_template.supplier, selected: true}= request_template.supplier
            %td
              -#%input{type: :file, name: "requests[new_#{i}][attachments_attributes][][file]", multiple: true}
            %td

        %tr
          - i += 1
          -#%td
            %select.form-control{name: "requests[new_#{i}][group_id]"}
              %option
              - Procurement::Group.all.each do |group|
                %option{value: group.id}= group
          %td
            %select.form-control{name: "requests[new_#{i}][description]"}
          %td
            %input.form-control{name: "requests[new_#{i}][desired_quantity]", type: :number, min: 0, placeholder: _('Desired quantity'), autocomplete: :off}
          %td
            -# TODO check role
            -#%input.form-control{name: "requests[new_#{i}][approved_quantity]", type: :number, min: 0, placeholder: _('Approved quantity'), autocomplete: :off}
          %td
            %input.form-control{name: "requests[new_#{i}][price]", type: :number, min: 0, placeholder: _('Price'), autocomplete: :off}
          %td
          %td
            %select.form-control{name: "requests[new_#{i}][supplier]"}
          %td
            -#%input{type: :file, name: "requests[new_#{i}][attachments_attributes][][file]", multiple: true}
          %td
    - unless params[:budget_period] == 'past'
      %tfoot
        %tr
          %td.h1{colspan: 7}
            -#%i.fa.fa-plus-circle
          %td.text-right
            %button.btn.btn-success{type: :submit}
              %i.fa.fa-check
              = _('Save')

:scss
  form .fa-plus-circle {
    cursor: pointer;
    color: #5cb85c;
  }

:coffeescript
  $(document).ready ->
    #$('tfoot').on 'click', '.fa-plus-circle', ->
    #  target_el = $(this).closest('tfoot').prev('tbody').find('tr:last-child')
    #  cloned_el = target_el.clone()
    #  cloned_el.find('input').val('')
    #  cloned_el.insertAfter(target_el)
    #  false

    $("form").on("ajax:success", (e, data, status, xhr) ->
      location.reload()
    ).on "ajax:error", (e, xhr, status, error) ->
      errors = ''
      for error in xhr.responseJSON
        errors += '<li>' + error + '</li>'
      $("#flash").html '<ul class="alert alert-danger" style="padding-left: 2em;">' + errors + '</ul>'

    #$("select[name*='[group_id]']").select2
    #  minimumInputLength: 0
    #  allowClear: true
    #  placeholder: '#{_("Group")}'

    $("select[name*='[description]']").select2
      minimumInputLength: 3
      allowClear: true
      placeholder: '#{_("Description")}'
      ajax:
        url: '/procurement/models.json'
        dataType: 'json'
        delay: 250
        data: (params) -> search_term: params.term
        processResults: (data) -> results: $.map data, (item) -> {id: item.name, text: item.name }
        cache: true
      escapeMarkup: (markup) -> markup
      templateResult: (result) -> result.text
      templateSelection: (result) -> result.text
      tags: true

    $("select[name*='[supplier]']").select2
      minimumInputLength: 3
      allowClear: true
      placeholder: '#{_("Supplier")}'
      ajax:
        url: '/procurement/suppliers.json'
        dataType: 'json'
        delay: 250
        data: (params) -> search_term: params.term
        processResults: (data) -> results: $.map data, (item) -> {id: item.name, text: item.name }
        cache: true
      escapeMarkup: (markup) -> markup
      templateResult: (result) -> result.text
      templateSelection: (result) -> result.text
      tags: true
