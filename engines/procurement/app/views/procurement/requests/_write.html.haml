.row
  .col-sm-12
    %input{type: :hidden, name: "requests[#{request.id}][id]", value: request.id}
    .row
      .col-sm-3
        .form-group
          %label
            = succeed ':' do
              = _('Model name')
          %br
          - if @group.template_categories.joins(:templates).where(procurement_templates: {model_description: request.model_description}).exists?
            = request.model_description
          - else
            %select.form-control{name: "requests[#{request.id}][model_description]"}
              %option{value: request.model_description, selected: true}= request.model_description
      .col-sm-2
        .form-group
          %label
            = succeed ':' do
              = _('Requested quantity')
          %br
          - if request.user_id == current_user.id
            %input.form-control{name: "requests[#{request.id}][requested_quantity]", type: :number, min: 0, value: request.requested_quantity, placeholder: _('Requested quantity'), autocomplete: :off}
          - else
            .label.label-primary
              = request.requested_quantity
      .col-sm-2
        .form-group
          %label
            = succeed ':' do
              = "%s %s %s" % [_('Item price'), MoneyRails.default_currency, _('incl. VAT')]
          %br
          %input.form-control{name: "requests[#{request.id}][price]", type: :number, min: 0, value: request.price.to_i, placeholder: ("%s %s" % [_('Item price'), _('incl. VAT')]), autocomplete: :off}
      .col-sm-2
        .form-group
          %label
            = succeed ':' do
              = _('Name of receiver')
          %br
          %input.form-control{name: "requests[#{request.id}][receiver]", value: request.receiver, placeholder: _('Name of receiver')}
      .col-sm-3
        .form-group
          %label
            = succeed ':' do
              = _('Motivation')
          %br
          %input.form-control{name: "requests[#{request.id}][motivation]", value: request.motivation, placeholder: _('Motivation'), maxlength: 255, data: {toggle: 'tooltip'}, title: _('max 255 characters')}

    .row
      .col-sm-3
        .form-group
          %label
            = succeed ':' do
              = _('Supplier')
          %br
          %select.form-control{name: "requests[#{request.id}][supplier]"}
            %option{value: request.supplier, selected: true}= request.supplier
      .col-sm-2
        - if request.group.inspectable_by? current_user
          .form-group
            %label
              = succeed ':' do
                = _('Approved quantity')
            %br
            %input.form-control{name: "requests[#{request.id}][approved_quantity]", type: :number, min: 0, value: request.approved_quantity, placeholder: _('Approved quantity'), autocomplete: :off}
      .col-sm-2
        .form-group
          %label
            = succeed ':' do
              = "%s %s %s" % [_('Total'), MoneyRails.default_currency, _('incl. VAT')]
          %br
          .label.label-primary.total_price{data: {total: request.total_price(current_user)}}
            = money_without_cents_and_with_symbol request.total_price(current_user)
      .col-sm-2
        .form-group
          %label
            = succeed ':' do
              = _('Department')
          %br
          %input.form-control{name: "requests[#{request.id}][department]", value: request.department, placeholder: _('Department'), autocomplete: :off}
      .col-sm-3
        - if request.group.inspectable_by? current_user
          .form-group
            %label
              = succeed ':' do
                = _('Inspection comment')
            %br
            %input.form-control{name: "requests[#{request.id}][inspection_comment]", value: request.inspection_comment, placeholder: _('Inspection comment'), maxlength: 255, data: {toggle: 'tooltip'}, title: _('max 255 characters')}

    .row
      .col-sm-3
        .form-group
          %label
            = succeed ':' do
              = _('Priority')
          %br
          - if request.user_id == current_user.id
            - ['high', 'normal'].each do |priority|
              %input{type: 'radio', name: "requests[#{request.id}][priority]", value: priority, checked: request.priority == priority}
              .label.label-default= _(priority)
          - else
            .label.label-default= _(request.priority)
      .col-sm-2
        - if request.group.inspectable_by? current_user
          .form-group
            %label
              = succeed ':' do
                = _('Order quantity')
            %br
            %input.form-control{name: "requests[#{request.id}][order_quantity]", type: :number, min: 0, value: request.order_quantity, placeholder: _('Order quantity'), autocomplete: :off}
      .col-sm-2
        .form-group
          %label
            = succeed ':' do
              = _('Status')
          %br
          = render partial: 'status', locals: {request: request}
      .col-sm-2
        .form-group
          %label
            = succeed ':' do
              = _('Attachments')
          %br
          %input{type: :file, name: "requests[#{request.id}][attachments_attributes][][file]", multiple: true}
          %ul
            - request.attachments.each do |attachment|
              %li
                %a{href: attachment.file.url, target: '_blank'}
                  = attachment.file.original_filename
      .col-sm-3.text-right
        .btn-group
          %button.btn.btn-default.btn-sm.dropdown-toggle{type: 'button', data: {toggle: 'dropdown'}, aria: {haspopup: true, expanded: false}}
            %i.fa.fa-gear
            %span.caret
          %ul.dropdown-menu.dropdown-menu-right
            %li.dropdown-header
              %h5
                = _('Move to another group')
            - Procurement::Group.where.not(id: @group).each do |group|
              %li
                %a{href: move_group_user_budget_period_request_path(@group, @user, @budget_period, request, to_group_id: group.id), data: {method: :put}}
                  %i.fa.fa-arrow-right
                  = group
            %li.divider{role: 'separator'}
            %li.dropdown-header
              %h5
                = _('Move to another budget period')
            - Procurement::BudgetPeriod.future.where.not(id: @budget_period).each do |budget_period|
              %li
                %a{href: move_group_user_budget_period_request_path(@group, @user, @budget_period, request, to_budget_period_id: budget_period.id), data: {method: :put}}
                  %i.fa.fa-arrow-right
                  = budget_period
            %li.divider{role: 'separator'}
            %li
              %a{href: group_user_budget_period_request_path(@group, @user, @budget_period, request), data: {method: :delete}}
                %i.fa.fa-trash
                = _('Delete')

