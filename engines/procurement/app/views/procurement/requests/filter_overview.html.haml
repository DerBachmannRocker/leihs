.row
  .col-sm-3
    = render partial: 'filter_panel'
  .col-sm-9
    - @h.each_pair do |budget_period, groups|

      .panel.panel-info
        .panel-heading
          %h2= budget_period

        .panel-body{id: "accordion_#{budget_period.id}", role: "tablist"}
          - groups.each_pair do |group, values1|
            - total_price = values1[:departments].values.flat_map(&:values).flat_map {|x| x[:total_price]}.sum
            .panel.panel-default
              .panel-heading{role: "tab"}
                .row(data-toggle="collapse" data-parent="#accordion_#{budget_period.id}" href="#collapse_#{budget_period.id}_#{group.id}")
                  .col-xs-7
                    %h3= group
                  .col-xs-1
                    - if values1[:budget_limit_amount].to_i > 0
                      - percentage = total_price.to_i * 100 / values1[:budget_limit_amount].to_i
                      .progress-radial{class: "progress-#{(percentage / 5).to_i * 5}"}
                        .overlay
                          = succeed '%' do
                            = percentage
                  .col-xs-4
                    - if values1[:budget_limit_amount].to_i > 0
                      .label.label-info.budget_limit
                        = money_without_cents_and_with_symbol values1[:budget_limit_amount]
                      %br

                    .label.label-primary.big_total_price
                      = money_without_cents_and_with_symbol total_price

              .panel-body(id="collapse_#{budget_period.id}_#{group.id}" class="panel-collapse collapse" role="tabpanel")
                - values1[:departments].each_pair do |parent_organization, values2|
                  - total_price = values2.values.flat_map {|x| x[:total_price]}.sum
                  - next if total_price.zero?
                  .row
                    .col-xs-8
                      %h4= parent_organization
                    .col-xs-4
                      .label.label-primary.total_price
                        = money_without_cents_and_with_symbol total_price

                  - values2.each_pair do |organization_unit, values3|
                    - requests = values3[:requests]
                    - next if values3[:total_price].zero?
                    .list-group{style: 'margin-left: 1em'}
                      .row
                        .col-xs-8
                          %h5= organization_unit
                        .col-xs-4.small
                          .label.label-primary.total_price
                            = money_without_cents_and_with_symbol values3[:total_price]
                      - requests.each do |request|
                        %a.list-group-item{href: group_user_budget_period_requests_path(request.group, request.user, request.budget_period)}
                          .row
                            .col-xs-2
                              .label.label-primary
                                = request.requested_quantity

                              - if request.approved_quantity
                                &nbsp;
                                :ruby
                                  state, label_class = state_label(request)
                                .label{class: label_class}
                                  = request.approved_quantity

                                - if request.order_quantity
                                  &nbsp;
                                  .label{class: label_class}
                                    = request.order_quantity

                            .col-xs-5
                              = request.model_description
                            .col-xs-1.small
                              .label.label-primary.total_price
                                = money_without_cents_and_with_symbol request.price
                            .col-xs-2.small
                              .label.label-primary.total_price
                                = money_without_cents_and_with_symbol request.total_price(current_user)
                            .col-xs-2.small
                              .label.label-default= _(request.priority)
                              %br
                              :ruby
                                state, label_class = state_label(request)
                              .label{class: label_class}
                                = _(state.to_s.humanize)
