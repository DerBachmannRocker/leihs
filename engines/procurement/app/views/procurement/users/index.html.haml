%h1= _('Users')

= form_tag users_path do
  .panel.panel-default
    .panel-heading
      %i.fa.fa-user-md
      = _('Admins')
    .panel-body
      %input{name: 'admin_ids', multiple: true, placeholder: _('Name of the admins')}

  .panel.panel-default
    .panel-heading
      %i.fa.fa-user
      = _('Requesters')
    %table.table
      %thead
        %tr
          %th.col-xs-4= _('Name')
          %th.col-xs-4= _('Department')
          %th.col-xs-3= _('Organization unit')
          %th.col-xs-1

      %tbody
      - @requester_accesses.each do |requester_access|
        %tr
          %td
            %input{type: :hidden, name: 'requesters[][id]', value: requester_access.user_id}
            %input{type: :hidden, name: 'requesters[][_destroy]'}
            %input.form-control{name: 'requesters[][name]', placeholder: _('Name of the requester'), autocomplete: :false, value: requester_access.user}
          %td
            %input.form-control{name: 'requesters[][department]', placeholder: _('Department'), autocomplete: :false, value: requester_access.organization.parent}
          %td
            %input.form-control{name: 'requesters[][organization]', placeholder: _('Organization unit'), autocomplete: :false, value: requester_access.organization}
          %td.text-right.h3
            %i.fa.fa-minus-circle

      %tr
        %td
          %input{type: :hidden, name: 'requesters[][id]'}
          %input.form-control{name: 'requesters[][name]', placeholder: _('Name of the requester'), autocomplete: :false}
        %td
          %input.form-control{name: 'requesters[][department]', placeholder: _('Department'), autocomplete: :false}
        %td
          %input.form-control{name: 'requesters[][organization]', placeholder: _('Organization unit'), autocomplete: :false}
        %td.text-right.h3
          %i.fa.fa-minus-circle
    .panel-footer
      %div{style: 'font-size: 2em'}
        %i.fa.fa-plus-circle

  .text-right
    %button.btn.btn-success{type: :submit}
      %i.fa.fa-check
      = _('Save')


:scss
  table > tbody > tr:nth-of-type(odd):not(.bg-danger) {
    background: #f9f9f9;
  }

:coffeescript
  $(document).ready ->
    $("input[name='admin_ids']").tokenInput '/procurement/users.json',
      minChars: 3
      queryParam: 'search_term'
      propertyToSearch: "lastname"
      resultsFormatter: (item)->
        "<li>" + item.firstname + " " + item.lastname + "</li>"
      tokenFormatter: (item)->
        "<li>" + item.firstname + " " + item.lastname + "</li>"
      prePopulate: #{@admins.sort{|a,b| a.firstname <=> b.firstname}.to_json(only: [:id, :firstname, :lastname])}
      preventDuplicates: true
      #theme: 'facebook'

    initAutocompletes = ->
      $("input[name='requesters[][name]']").autocomplete
        minLength: 3
        source: ( request, response )->
          $.ajax
            url: '/procurement/users.json'
            dataType: "json"
            data:
              search_term: request.term
            success: ( data )->
              response( data )
              #response($.map data, (item)->
              #  {label: item.firstname + ' ' + item.lastname, value: item.id})
        select: ( event, ui )->
          $(this).closest('tr').find("input[name='requesters[][id]']").val( ui.item.id )
          $(this).val( ui.item.firstname + " " + ui.item.lastname )
          false
      .each ->
        $(this).data('ui-autocomplete')._renderItem = ( ul, item )->
          $( "<li>" ).append( "<a>" + item.firstname + " " + item.lastname + "</a>" ).appendTo( ul )

    do initAutocompletes

    $('.panel-footer').on 'click', '.fa-plus-circle', ->
      target_el = $(this).closest('.panel').find('tbody > tr:last-child')
      cloned_el = target_el.clone()
      cloned_el.find('input').val('')
      cloned_el.insertAfter(target_el)
      do initAutocompletes
      false

    $('tbody').on 'click', '.fa-minus-circle', ->
      row_el = $(this).closest('tr')
      target_el = row_el.find("input[name*='[_destroy]']")
      target_el.val('1').change()
      row_el.addClass('bg-danger')
      false

-#:coffeescript
  $(document).ready ->
    $("input[name='requester_ids[]']").autocomplete
      minLength: 3
      source: ( request, response )->
        $.ajax
          url: '/procurement/users.json'
          dataType: 'json'
          data:
            search_term: request.term
          success: ( data )->
            #response( data )
            response($.map data, (item)->
              {label: item.firstname + ' ' + item.lastname, value: item.id})
      select: ( event, ui )->
        terms = this.value.split( /,\s*/ );
        terms.pop();
        #terms.push( ui.item.firstname + ' ' + ui.item.lastname );
        terms.push( ui.item.label );
        terms.push( "" );
        this.value = terms.join( ", " );
        false
    .each ->
      $(this).data('ui-autocomplete')._renderItem = ( ul, item )->
        $( "<li>" ).append( "<a>" + item.firstname + ' ' + item.lastname + "</a>" ).appendTo( ul )

-#:coffeescript
    #{@requesters.sort{|a,b| a.firstname <=> b.firstname}.to_json(only: [:id, :firstname, :lastname])}.forEach (user, i)->
      option = new Option(user.firstname + ' ' + user.lastname, user.id, true, true)
      element1.append(option)
    element1.trigger('change')

    element1 = $("input[name='admin_ids[]']").autocomplete
      minLength: 3
      ajax:
        url: '/procurement/users.json'
        dataType: 'json'
        delay: 250
        data: (params) -> search_term: params.term
        processResults: (data) -> results: data
        cache: true
      escapeMarkup: (markup) -> markup
      templateResult: (result) ->
        if result.loading
          return result.text
        result.firstname + ' ' + result.lastname
      templateSelection: (result) ->
        if result.firstname and result.lastname
          result.firstname + ' ' + result.lastname
        else
          result.text
    #{@admins.sort{|a,b| a.firstname <=> b.firstname}.to_json(only: [:id, :firstname, :lastname])}.forEach (user, i)->
      option = new Option(user.firstname + ' ' + user.lastname, user.id, true, true)
      element1.append(option)
    element1.trigger('change')
